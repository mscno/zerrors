package zerrors

import (
	"errors"
	"fmt"
	"github.com/samber/oops"
)

const Err{{ .ErrorName }} = "{{ .ErrorNameLowerSpaced }}"

func Throw{{ .ErrorName }}(action, kind, name string) error {
	message := fmt.Sprintf("cannot %s '%s' of kind '%s'", action, name, kind)
	return oops.Code(Err{{ .ErrorName }}).Errorf(message)
}

func Throw{{ .ErrorName }}r(action, kind, name, reason string) error {
	message := fmt.Sprintf("cannot %s '%s' of kind '%s': %s", action, name, kind, reason)
	return oops.Code(Err{{ .ErrorName }}).Errorf(message)
}

func {{ .ErrorName }}(message string, KVs ...interface{}) error {
	return oops.Code(Err{{ .ErrorName }}).With(KVs...).Errorf(message)
}

func {{ .ErrorName }}f(format string, a ...interface{}) error {
	return oops.Code(Err{{ .ErrorName }}).Errorf(format, a...)
}

func {{ .ErrorName }}Builder() oops.OopsErrorBuilder {
	return oops.Code(Err{{ .ErrorName }})
}

func To{{ .ErrorName }}(parent error, format string, a ...interface{}) error {
	return oops.Code(Err{{ .ErrorName }}).Wrapf(parent, format, a...)
}

func Is{{ .ErrorName }}(err error) bool {
	var possibleError oops.OopsError
	if errors.As(err, &possibleError) {
		return possibleError.Code() == Err{{ .ErrorName }}
	}
	return false
}
