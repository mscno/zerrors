package zerrors

import (
	"errors"
	"fmt"
)

var (
	_ {{.ErrorName}} = (*{{.ErrorName}}Error)(nil)
	_ Error    = (*{{.ErrorName}}Error)(nil)
)

type {{.ErrorName}} interface {
	error
	Is{{.ErrorName}}()
}

type {{.ErrorName}}Error struct {
	*Zerror
}

func Throw{{.ErrorName}}(parent error, id string, message string) error {
	return &{{.ErrorName}}Error{CreateZerror(parent, id, message)}
}

func Throw{{.ErrorName}}f(parent error, id string, format string, a ...interface{}) error {
	return Throw{{.ErrorName}}(parent, id, fmt.Sprintf(format, a...))
}

func (err *{{.ErrorName}}Error) Is{{.ErrorName}}() {}

func (err *{{.ErrorName}}Error) Is(target error) bool {
	return Is{{.ErrorName}}(target)
}

func Is{{.ErrorName}}(err error) bool {
	var possibleError *{{.ErrorName}}Error
	if errors.As(err, &possibleError) {
		return true
	}
	return false
}
